#pragma kernel InitialCompact
#pragma kernel Reset
#pragma kernel Count
#pragma kernel Sum
#pragma kernel Compact
#pragma kernel FillArguments

#pragma multi_compile_local _ SHADOWS

#define GROUP_SIZE 256
#define mask 0xFF

struct SumPack{
    uint startBase;
    uint countBase;

    uint startTrans;
    uint countTrans;
};

RWStructuredBuffer<uint> _TargetLODs;
RWStructuredBuffer<SumPack> _Counters;
RWStructuredBuffer<SumPack> _ShadowCounters;

RWStructuredBuffer<uint> _PreVisibleInstances;
RWStructuredBuffer<uint> _Indices;
RWStructuredBuffer<uint> _ShadowIndices;
RWStructuredBuffer<uint> _Arguments;


uint _MaxInstances;
uint _LODCount;
uint _ShadowLodOffset;
uint _SubMeshCount; 

void UnMask(in uint value, out uint LodValue, out float NormalTransition, out uint VisibleNormal, out float ShadowTransition, out uint VisibleShadow){
    LodValue = value & 0xFF;
    NormalTransition = ((value >> 8) & 0x3FFF);
    VisibleNormal = (value >> 22) & 1;
    ShadowTransition = ((value >> 23) & 0xFF);
    VisibleShadow = (value >> 31) & 1;
}

uint _InstancesPerChunk;
StructuredBuffer<uint> _Skips;

[numthreads(GROUP_SIZE,1,1)]
void InitialCompact(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _MaxInstances)
        return;

    uint ind = floor(id.x/_InstancesPerChunk);
    uint skipAmount = _Skips[ind];
    uint trueIndex = id.x+skipAmount*_InstancesPerChunk;
    _PreVisibleInstances[id.x] = trueIndex;
}

[numthreads(GROUP_SIZE,1,1)]
void Count(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _MaxInstances) 
        return;
    
    uint LodValue;
    uint Transition;
    uint ShadowTransition;

    uint VisibleNormal;
    uint VisibleShadow;
    UnMask(_TargetLODs[id.x], LodValue, Transition, VisibleNormal, ShadowTransition, VisibleShadow);

    if(VisibleNormal > 0){
        if(Transition > 0)
            InterlockedAdd(_Counters[LodValue].countTrans, 1);
        else
            InterlockedAdd(_Counters[LodValue].countBase, 1);
    }
    
    #if SHADOWS
    if(VisibleShadow > 0){
        int newIndex = min(LodValue+_ShadowLodOffset, _LODCount-1);
        if(ShadowTransition > 0)
            InterlockedAdd(_ShadowCounters[newIndex].countTrans, 1);
        else
            InterlockedAdd(_ShadowCounters[newIndex].countBase, 1);
    }
    #endif

}

[numthreads(1,1,1)]
void Sum(uint3 id : SV_DispatchThreadID)
{
    uint currentSum = 0;
    uint currentSumShadows = 0;
    for(uint x = 0; x < _LODCount; x++){
        _Counters[x].startBase = currentSum;
        currentSum += _Counters[x].countBase;
        _Counters[x].startTrans = currentSum;
        currentSum += _Counters[x].countTrans;
        _Counters[x].countTrans = 0;
        _Counters[x].countBase = 0;
    }
}

[numthreads(GROUP_SIZE,1,1)]
void Compact(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _MaxInstances) 
        return;

    uint LodValue;
    uint Transition;
    uint ShadowTransition;

    uint VisibleNormal;
    uint VisibleShadow;
    UnMask(_TargetLODs[id.x], LodValue, Transition, VisibleNormal,ShadowTransition, VisibleShadow);

    if(VisibleNormal > 0){
        int specificIndex;
        if(Transition > 0){
            InterlockedAdd(_Counters[LodValue].countTrans, 1, specificIndex);
            _Indices[_Counters[LodValue].startTrans+specificIndex] = id.x;
        }else{
            InterlockedAdd(_Counters[LodValue].countBase, 1, specificIndex);
            _Indices[_Counters[LodValue].startBase+specificIndex] = id.x;
        }
    }

    #if SHADOWS
    if(VisibleShadow > 0){
        int specificIndex;
        int newIndex = min(LodValue+_ShadowLodOffset, _LODCount-1);
        if(ShadowTransition > 0){
            InterlockedAdd(_ShadowCounters[newIndex].countTrans, 1, specificIndex);
            _ShadowIndices[_ShadowCounters[newIndex].startTrans+specificIndex] = id.x;
        }else{
            InterlockedAdd(_ShadowCounters[newIndex].countBase, 1, specificIndex);
            _ShadowIndices[_ShadowCounters[newIndex].startBase+specificIndex] = id.x;
        }
    }
    #endif
}

[numthreads(1,1,1)]
void FillArguments(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _LODCount) return;
    if(id.y >= _SubMeshCount) return;

    int instancesToDraw = _Counters[id.x].countBase+_Counters[id.x].countTrans;
    if(id.x > 0){
        instancesToDraw += _Counters[id.x-1].countTrans;
        _Counters[id.x].startBase = _Counters[id.x-1].startTrans;
    }

    _Arguments[(id.x*_SubMeshCount+id.y)*5+1] = instancesToDraw;
}

[numthreads(1,1,1)]
void Reset(uint3 id : SV_DispatchThreadID)
{
    _Counters[id.x].countTrans = 0;
    _Counters[id.x].countBase = 0;
    _Counters[id.x].startBase = 0;
    _Counters[id.x].startTrans = 0;
}