#pragma kernel CalculatePositions
#pragma kernel OriginShift

#pragma multi_compile_local _ HEIGHTMAP_ENABLED

#include "..\Helpers\Random.cginc"
#include "..\Helpers\Quaternion.cginc"
#include "..\Helpers\GetIndicesWithHeight.hlsl"

struct InstanceData {
    float3 position;
    uint2 quaternionScale;
    uint normalandTexture;
};

struct SampledPositionNormal
{
    float3 position;
    float3 normal;
};

struct VegetationData
{
    float3 position;
    float3 normal;
    float3 idHash;
    float validity;
    float2 worldUV;
    float density;
};

RWStructuredBuffer<InstanceData> _PerInstanceData;
RWStructuredBuffer<int> _MinMaxBuffer;
Texture2D<float4> _TerrainHeightNormal;
Texture2D<float4> _DensityMap;
SamplerState my_linear_clamp_sampler;

//Asset Properties
float _TextureRandomnessDistance, _VerticalPosition, _DistanceBetween, _PositionRandomness;
int _DensityIsHeight, _AlignToGround;
float2 _Size;

//Terrain Properties
int _Resolution;
float _MeshScale;
float3 _MeshOffset;

float4x4 _localToWorld;
float4x4 _worldToLocal;

//Rendering Properties
uint _IndexOffset,_ItemIndex, _SubTextureIndex, _ChunkInstancesRow, _TotalInstances;
float3 _ChunkPosition;

float4 MultiplyVector(float4x4 trs, float3 position)
{
    float4 result = 0;
    result.x = trs._11 * position.x + trs._12 * position.y + trs._13 * position.z;
    result.y = trs._21 * position.x + trs._22 * position.y + trs._23 * position.z;
    result.z = trs._31 * position.x + trs._32 * position.y + trs._33 * position.z;
    return result;
}

uint2 CompactRotationScale(float4 rotQuat, float scale){
    float4 qn = normalize(rotQuat);
    float3 q = (qn.xyz+1.0)/2.0f;

    uint3 qs = q*0xFFFF;
    
    uint qxqy = (qs.x) | (qs.y << 16);
    uint qzs = (qs.z) | (f32tof16(scale) << 16);
    return uint2(qxqy, qzs);
}

uint CompactNormalTextureIndex(float3 normal, int textureIndex){
    float3 nn = normalize(normal);
    float2 n = (nn.xz+1.0)/2.0f;

    uint2 ns = (uint2)(n*0xFFF);
    return (ns.x) | (ns.y << 12) | ((textureIndex+1) << 24);
}


inline float2 VegetationUVFromIndex(uint2 index, out float3 idHash)
{ 
    uint x = index.x;
    uint y = index.y;

    float2 centeredPosition = uint2(x, y) + (_TotalInstances-_ChunkInstancesRow)/2.0f;
    
    
    float3 positionOffset = _TotalInstances*(_ChunkPosition/_MeshScale);
    centeredPosition += positionOffset.xz;
    float2 fractalIndex = centeredPosition / (float)_TotalInstances;
    uint2 scaled = floor(fractalIndex*_TotalInstances);

    idHash = randValue(uint3(x,y,_ItemIndex));

    float indexOffset = _DistanceBetween/_MeshScale;
    float2 addition = _PositionRandomness*normalize((idHash.xy - .5f)*2.0)*indexOffset/1.5f;

    fractalIndex.x += addition.x;
    fractalIndex.y += addition.y;

    return 1.0 / ((_Resolution + 1) * 2) + fractalIndex * (1.0f - 1.0f / (_Resolution + 1));
}

inline float3 GetPositionWithHeight(float2 fractalIndex, float height)
{
    float2 originalUV = (fractalIndex - 1.0 / ((_Resolution + 1) * 2)) / (1.0 - 1.0 / (_Resolution + 1));


    float3 position = float3(originalUV.x * _MeshScale, height, originalUV.y * _MeshScale);
    return position;
}

inline SampledPositionNormal RetrievePositionNormal(float2 uv)
{
    float4 interpolatedNormalAndHeight = _TerrainHeightNormal.SampleLevel(my_linear_clamp_sampler, uv, 0);
    float3 position = GetPositionWithHeight(uv, interpolatedNormalAndHeight.a);
    SampledPositionNormal o;
    o.position = position;
    o.normal = normalize(interpolatedNormalAndHeight.rgb);
    return o;
}

VegetationData GetData(uint2 index)
{
    float3 idHash = -1;
    float2 uv = VegetationUVFromIndex(index, idHash);
    float3 position = 0;
    float3 normal = 0;
    float validity = 0;
    float density = 0;
    if (uv.x <= 1 && uv.x >= 0 && uv.y <= 1 && uv.y >= 0)
    {
        // Calculate height with bilinear interpolation of the heights of the nodes of the cell
        SampledPositionNormal result = RetrievePositionNormal(uv);

        float2 offset = idHash.zx;
        //Check vegetation map too
        position = result.position.xyz;
        normal = result.normal;
        
        density = _DensityMap.SampleLevel(my_linear_clamp_sampler, uv, 0)[_SubTextureIndex];
        validity = step(idHash.y, density);
    }

    VegetationData data;
    data.position = position;
    data.normal = normal;
    data.idHash = idHash;
    data.validity = validity;
    data.worldUV = uv;
    data.density = density;
    return data;
}


[numthreads(8,8,1)]
void CalculatePositions(uint3 id: SV_DISPATCHTHREADID)
{
    if (id.x >= _ChunkInstancesRow || id.y >= _ChunkInstancesRow)
        return;
    
    uint index = id.x + id.y * _ChunkInstancesRow+_IndexOffset;
    VegetationData data = GetData(id.xy);

    float sizeChance = data.idHash.x;
    if(_DensityIsHeight == 1)
        sizeChance *= data.density;
    float size = lerp(_Size.x, _Size.y, sizeChance);
    if(_DensityIsHeight == 2)
        size *= data.density;

    float4 rotation = rotate_angle_axis(data.idHash.x*PI, float3(0,1,0));
    if(_AlignToGround != 0){
        float3 targetDirection = _AlignToGround == 2 ? data.normal : float3(0,1,0);        
        float4 aligned = from_to_rotation(float3(0,1,0),MultiplyVector(_localToWorld, targetDirection).xyz);
        float4 combined = qmul(aligned, rotation);
        rotation = combined;
    }
    
    float4x4 trans = transpose(_localToWorld);
    float4 worldOffset = trans[3];
    trans[3] = float4(0,0,0,1);

    float3 offsetTransformed = mul(_worldToLocal,float4(worldOffset.xyz, 0)).xyz+_MeshOffset;
    offsetTransformed.xz -= _MeshScale/2.0f;

    InstanceData resultData;
    resultData.position = mul(transpose(trans),float4(data.position+_VerticalPosition*data.normal+offsetTransformed,1)).xyz;
    resultData.quaternionScale = CompactRotationScale(rotation, size);


    if(data.validity > 0){
        InterlockedMin(_MinMaxBuffer[0], (int)floor(data.position.y));
        InterlockedMax(_MinMaxBuffer[1], (int)ceil(data.position.y));

        int4 highestIndices = 0;
        float4 highestWeights = .001f;

        float2 offset = (data.idHash.zx*2.0-1.0)*_TextureRandomnessDistance/_MeshScale;

        GetTexturesIndices(data.worldUV+offset, highestIndices, highestWeights);

        half maxWeight = max(max(highestWeights.x, highestWeights.y),max(highestWeights.z, highestWeights.w));
        half4 selected = highestWeights/maxWeight;
        int4 newIndices = step(.99f, selected)*highestIndices;
        int textureIndex = max(max(newIndices.x,newIndices.y), max(newIndices.z,newIndices.w));
        resultData.normalandTexture = CompactNormalTextureIndex(data.normal,textureIndex);
        //_PerInstanceData[index].normalandTexture = CompactNormalTextureIndex(data.normal,textureIndex);
    }
    else{
        resultData.normalandTexture = CompactNormalTextureIndex(data.normal,-1);
    }
    
    _PerInstanceData[index] = resultData;
}

float3 _OriginOffset;
[numthreads(256,1,1)]
void OriginShift(uint3 id: SV_DISPATCHTHREADID)
{
    if (id.x >= _ChunkInstancesRow)
        return;
    
    //uint index = id.x + _IndexOffset;
    _PerInstanceData[id.x].position += _OriginOffset;
    /* _PerInstanceData[id.x].position += _OriginOffset; */
}